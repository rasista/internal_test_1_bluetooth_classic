#ifndef __LMP_TX_RX_HANDLERS_AUTOGEN_H__
#define  __LMP_TX_RX_HANDLERS_AUTOGEN_H__
#include <lmp.h>

void lmp_name_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_name_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_accepted_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_not_accepted_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_clkoffset_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_clkoffset_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_detach_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_in_rand_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_comb_key_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_unit_key_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_au_rand_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_sres_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_temp_rand_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_temp_key_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_encryption_mode_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_encryption_key_size_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_start_encryption_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_stop_encryption_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_switch_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_hold_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_hold_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_sniff_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_unsniff_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_incr_power_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_decr_power_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_max_power_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_min_power_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_auto_rate_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_preferred_rate_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_version_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_version_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_features_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_features_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_quality_of_service_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_quality_of_service_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_SCO_link_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_remove_SCO_link_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_max_slot_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_max_slot_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_timimg_accuracy_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_timing_accuracy_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_setup_complete_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_use_semi_permanent_key_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_host_connection_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_slot_offset_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_page_mode_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_page_scan_mode_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_supervision_timeout_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_test_activate_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_test_control_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_encryption_key_size_mask_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_encryption_key_size_mask_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_set_afh_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_encapsulated_header_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_encapsulated_payload_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_simple_pairing_confirm_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_simple_pairing_number_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_dhkey_check_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_pause_encryption_aes_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_accepted_ext_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_not_accepted_ext_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_features_req_ext_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_features_res_ext_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_clk_adj_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_clk_adj_ack_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_clk_adj_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_packet_type_table_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_eSCO_link_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_remove_eSCO_link_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_channel_classification_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_channel_classification_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_sniff_subrating_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_sniff_subrating_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_pause_encryption_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_resume_encryption_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_io_capability_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_io_capability_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_numeric_comparison_failed_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_passkey_failed_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_oob_failed_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_keypress_notification_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_power_control_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_power_control_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_ping_req_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_ping_res_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_sam_set_type0_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_sam_define_map_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);
void lmp_sam_switch_tx_handler(ulc_t *ulc, uint32_t lmp_control_word, void *lmp_input_params);

void lmp_name_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_name_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_clkoffset_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_clkoffset_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_detach_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_in_rand_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_comb_key_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_unit_key_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_au_rand_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sres_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_temp_rand_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_temp_key_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_mode_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_key_size_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_start_encryption_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_stop_encryption_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_switch_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_hold_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_hold_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sniff_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_unsniff_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_incr_power_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_decr_power_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_max_power_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_min_power_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_auto_rate_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_preferred_rate_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_version_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_version_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_features_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_features_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_quality_of_service_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_quality_of_service_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_SCO_link_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_remove_SCO_link_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_max_slot_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_max_slot_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_timimg_accuracy_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_timing_accuracy_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_setup_complete_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_use_semi_permanent_key_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_host_connection_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_slot_offset_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_page_mode_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_page_scan_mode_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_supervision_timeout_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_test_activate_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_test_control_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_key_size_mask_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_key_size_mask_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_set_afh_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encapsulated_header_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encapsulated_payload_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_simple_pairing_confirm_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_simple_pairing_number_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_dhkey_check_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_pause_encryption_aes_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_features_req_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_features_res_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_clk_adj_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_clk_adj_ack_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_clk_adj_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_packet_type_table_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_eSCO_link_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_remove_eSCO_link_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_channel_classification_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_channel_classification_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sniff_subrating_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sniff_subrating_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_pause_encryption_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_resume_encryption_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_io_capability_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_io_capability_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_numeric_comparison_failed_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_passkey_failed_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_oob_failed_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_keypress_notification_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_power_control_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_power_control_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_ping_req_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_ping_res_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sam_set_type0_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sam_define_map_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sam_switch_rx_handler(ulc_t *ulc, pkb_t *pkb);

void lmp_sniff_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_unsniff_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_max_slot_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_host_connection_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_in_rand_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_mode_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_key_size_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_start_encryption_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_stop_encryption_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encapsulated_header_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encapsulated_payload_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_simple_pairing_number_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_dhkey_check_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_switch_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_quality_of_service_req_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);

void lmp_sniff_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_max_slot_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_host_connection_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_in_rand_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_au_rand_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_mode_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encryption_key_size_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_start_encryption_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_stop_encryption_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_switch_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_simple_pairing_confirm_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_simple_pairing_number_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_dhkey_check_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encapsulated_header_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_encapsulated_payload_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_quality_of_service_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_incr_power_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_decr_power_req_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_max_power_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_min_power_not_accepted_rx_handler(ulc_t *ulc, pkb_t *pkb);

void lmp_packet_type_table_req_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_eSCO_link_req_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_remove_eSCO_link_req_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);

void lmp_packet_type_table_req_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_eSCO_link_req_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_remove_eSCO_link_req_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_pause_encryption_req_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_io_capability_req_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_sniff_subrating_req_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_power_control_req_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
void lmp_power_control_res_not_accepted_ext_rx_handler(ulc_t *ulc, pkb_t *pkb);
#endif