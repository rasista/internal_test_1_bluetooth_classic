@Library(['common-ci-scripts']) _

pipeline {
  agent {
    label 'nomad-everest'
  }

  triggers {
    cron('30 0 * * 1')
  }

  options {
    parallelsAlwaysFailFast()
    skipDefaultCheckout(true)
  }

  environment {
    GSDK="${WORKSPACE}/gsdk"
    BTC="${WORKSPACE}/gsdk/protocol/bluetooth_classic"
    WORKSPACE_PATH="${BTC}"
    PYTHONPATH="${BTC}/ut_frameworks/utf:${BTC}/ut_frameworks/utf/utf_lib_btdm"
    HARNESS_DIR="${BTC}/ut_frameworks/utf/config/"
    SIM_PATH = "${BTC}/ut_frameworks/simpy_framework"
    BUILD_PATH = "${BTC}/bin"
    HARNESS_NAME="example_harness.yaml"
    UART_PORTS_PATH="/dev/pts"
  }
  stages {
    stage('checkout'){
      steps{
        script{
          Map checkoutStages = [
            "Clone - bluetooth_classic" : checkoutSCMStage(
              path:'bluetooth_classic',
              branches: [CHANGE_BRANCH],
              refs: [CHANGE_TARGET],
              'https://stash.silabs.com/scm/btdm_audio/bluetooth_classic.git'
            ),
            "Clone - gsdk" : checkoutSCMStage(
              path:'gsdk',
              branches: ['main'],
              shallow: true,
              lfs: true,
              'https://stash-mirror.silabs.com/scm/gsdk/gsdk.git'
            ),
          ]
          parallel checkoutStages
        }
      }
    }
    stage('Patch GSDK') {
      steps {
        script {
          dir('gsdk'){
            sh '''
              cp -rf ../bluetooth_classic protocol/bluetooth_classic
            '''
          }
        }
      }
    } 
    stage('get sl_btdm_log version')
    {
      steps {
        script {
          dir('gsdk/protocol/bluetooth_classic/src/utils/debug/sl_btdm_logging'){
            sh '''
              git log -n 2
            '''
          }
        }
      }
    }
    stage('Signature Trust SDK') {
      steps {
        script {
            sh """
              slc signature trust --sdk ${GSDK}
            """
        }
      }
    }
    stage('Build Rail Library sixg300xilpwh74000fpga') {
        steps {
            script {
                dir('gsdk/platform/radio/rail_lib') {
                    sh '''
                      make clean ; make librail_sixg300xilpwh74000fpga_gcc_debug RAIL_LIB_DEV=1
                    '''
                }
            }
        }
    }
    stage("Build Bluetooth Classic SDK and lite controller sixg300xilpwh74000fpga for sequencer ") {
        steps {
            script {
                dir("${BTC}") {
                    sh """
                      sh build_system_librailsixg300_74k_jenkins.sh  -c 0 -r 0
                    """
                }
            }
        }
    }
    stage("Build Bluetooth Classic SDK and lite controller sixg300xilpwh74000fpga for test_mode") {
        steps {
            script {
                dir("${BTC}") {
                    sh """
                      sh build_system_librailsixg300_74k_jenkins.sh -r 1
                    """
                }
            }
        }
    }
    stage('Build llc Binary') {
        steps {
            script {
                dir("${BTC}/src/lc/llc/ut/simpy") {
                    sh """
                      rm -rf ${BTC}/bin
                      sh configure.sh
                      cd "${BTC}/bin"
                      make clean
                      make
                    """
                }
            }
        }
    }
    stage('Run Test Cases for llc') {
      steps {
        script{
          dir("${BTC}/src/lc/llc/ut/simpy") {
            sh """
              pytest
            """
          }
        }
      }
    }
    stage('Build ulc Binary') {
        steps {
            script {
                dir("${BTC}") {
                    sh """
                      rm -rf bin/
                      cd "src/lc/ulc/ut/linapps/btc_virtual_controller/"
                      sh configure.sh
                      cd "${BTC}/bin/"
                      make clean
                      make
                      
                      # Setup the virtual environment for UTF
                      cd "${BTC}/ut_frameworks/utf"
                      python3 -m venv ./venv
                      source ./venv/bin/activate
                      pip install --upgrade pip
                      python3 -m pip install -r ${BTC}/host_requirements.txt --index-url https://artifactory.silabs.net/artifactory/api/pypi/infrasw-python-virtual/simple
                    """
                }
            }
        }
    }
    stage('Run Test Cases for ulc') {
      steps {
        script{
          dir("${BTC}/ut_frameworks/utf") {
            sh """
              source ./venv/bin/activate              
              # Change to the tests directory
              cd "${BTC}/src/lc/ulc/ut/linapps/btc_virtual_controller"
              
              # Run pytest
              python3 main_runner.py
            """
          }
        }
      }
    }
    stage('Run Memory Consumption Report') {
      steps {
        script{
          dir("${BTC}/tools/script/memory") {
            sh """
              sh memory_consumption.sh libbtc_llc.a
            """
          }
        }
      }
    }
  }
  post {
    always {
      script{
        if (env.BRANCH_NAME == 'master') {
          emailext (
            subject: "Build on ${env.JOB_NAME} is ${currentBuild.currentResult} ",
            body: " Build for ${env.JOB_NAME} is complete.\n\nCheck the build log here: ${env.BUILD_URL}",
            to: "DL.DevOps.BuildAndRelease.Hyd@silabs.com,DL.Ayghosh.ayghosh.staff@silabs.com", // Change to your recipient email address
          )
        }
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'gsdk/protocol/bluetooth_classic/src/lc/coverage_reports', reportFiles: 'coverage_ulc.html', reportName: 'ULC_Code_Coverage_Report', reportTitles: 'ULC Code Coverage Report'])
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'gsdk/protocol/bluetooth_classic/src/lc/coverage_reports', reportFiles: 'coverage_llc.html', reportName: 'LLC_Code_Coverage_Report', reportTitles: 'LLC Code Coverage Report'])
        archiveArtifacts "gsdk/protocol/bluetooth_classic/src/lc/llc/ut/simpy/xml_test.xml"
        archiveArtifacts "gsdk/protocol/bluetooth_classic/src/lc/llc/ut/simpy/html_test.html"
        archiveArtifacts "gsdk/protocol/bluetooth_classic/tools/memory_report.txt"
        junit allowEmptyResults: false, testResults: "gsdk/protocol/bluetooth_classic/src/lc/llc/ut/simpy/xml_test.xml"
      }
    }
  }
}
