cmake_minimum_required(VERSION 3.16)
include($ENV{WORKSPACE_PATH}/cmake/common.cmake)
project(btc_usched_ut_simpy)

add_executable(btc_usched_ut_simpy)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Os -fstack-usage -Werror -DSIM=1 -DLINUX_UTILS ")


target_sources(btc_usched_ut_simpy PRIVATE
     usched_interface/usched_intf.c
     ${BTC_THREADS}/thread_protection.c
     ${BTC_USCHED_SRC}/../../../utils/debug/debug.c
     ${BTC_USCHED_SRC}/../../../utils/plt_deps/btc_plt_deps.c
     ${BTC_USCHED_SRC}/../../../lc/rail_libintf/host_to_lpw_interface.c
     ${BTC_USCHED_SRC}/../../../utils/queue/btc_queue.c
     ${BTC_USCHED_SRC}/../../../btc.c
    #  ${BTC_USCHED_SRC}/../../../lc/ulc/host_interface/host_interface.c
     ${BTC_USCHED_SRC}/../../../utils/pkb_mgmt/pkb_mgmt.c
     )

add_subdirectory(${SIMPY_SRC}/ simpy_intf_binaries)
target_link_libraries(btc_usched_ut_simpy PRIVATE simpy_intf)
add_dependencies(btc_usched_ut_simpy simpy_intf)
 
add_subdirectory(${JSON_LIBS}/jansson-2.13/ jansson_binaries)
target_link_libraries(btc_usched_ut_simpy PRIVATE jansson)
add_dependencies(btc_usched_ut_simpy jansson)

add_subdirectory(${BTC_USCHED_SRC}/ btc_usched_binaries)
target_link_libraries(btc_usched_ut_simpy PRIVATE btc_usched)
add_dependencies(btc_usched_ut_simpy btc_usched)


target_include_directories(btc_usched_ut_simpy PUBLIC
    ${BTC_THREADS}
    ${BTC_USCHED_SRC}
    ${SIMPY_SRC}
    ${CMAKE_CURRENT_BINARY_DIR}/btc_usched_binary
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${BTC_USCHED_SRC}/../../../utils/debug
    # ${BTC_USCHED_SRC}/../../../lc/ulc/host_interface
    ${BTC_USCHED_SRC}/../../../utils/plt_deps
    ${BTC_USCHED_SRC}/../../../lc/rail_libintf
    ${BTC_USCHED_SRC}/../../../utils/queue
    ${BTC_USCHED_SRC}/../../../
    ${BTC_USCHED_SRC}/../../../utils/pkb_mgmt
    # ${BTC_USCHED_SRC}/../../../lc/ulc/hci
)

set(AUTOGEN_RECIPES)
list (APPEND AUTOGEN_RECIPES 
    cli_commands.c
    ${SIMPY_SRC}/command_template.j2 
    ${CMAKE_CURRENT_SOURCE_DIR}/usched_commands.yaml
    )

list (APPEND AUTOGEN_RECIPES 
    usched_api_json2c.c
    ${JSON_LIBS}/scheduler_json2c.c.j2
    ${BTC_USCHED_SRC}/usched_api.yaml
    )

# Define a function to simulate a while loop
function(add_autogen_targets list need_sm_config)
    # Get the length of the Autogen recipes
    set(autogen_recipes ${${list}})
    list(LENGTH autogen_recipes counter)
    math(EXPR index "0")
    configure_file(${SIMPY_SRC}/root_configs.yaml ${BTC_BUILD}/ COPYONLY)
    configure_file(${SIMPY_SRC}/simulation_run.sh ${BTC_BUILD}/ COPYONLY)
    while(${index} LESS ${counter})
        math(EXPR out_index "${index} + 0")
        math(EXPR template_index "${index} + 1")
        math(EXPR config_index "${index} + 2")
        list(GET autogen_recipes ${out_index} output_file)
        list(GET autogen_recipes ${template_index} template_file)
        list(GET autogen_recipes ${config_index} config_file)
        
        #Adding autogen_file to source_list
        target_sources(btc_usched_ut_simpy  PRIVATE ${output_file})
        #Adding a dummy comand to show that source file is autogenerated
        add_custom_command(
            OUTPUT ${output_file}
            COMMAND echo Generating ${output_file}
        )
        #Actual target in make file which aoutogenerates the source file
        if (${need_sm_config} MATCHES "1")
            string(REPLACE "/" "_" config_target "${config_file}")
            add_custom_target(${output_file}_sm_details
                COMMAND mkdir -p ${CMAKE_CURRENT_BINARY_DIR}/tmp_files
                COMMAND python3 ${TOOLS}/generate_sm_details.py -i ${config_file} -o ${CMAKE_CURRENT_BINARY_DIR}/tmp_files/${config_target} -b ${CMAKE_CURRENT_SOURCE_DIR}
            )
            add_custom_target(${output_file}
                COMMAND mkdir -p ${CMAKE_CURRENT_BINARY_DIR}/autogen_files
                COMMAND echo ${TOOLS}/jinja_renderer.py -o ${output_file} -t ${template_file} -y ${CMAKE_CURRENT_BINARY_DIR}/tmp_files/${config_target}
                COMMAND python3 ${TOOLS}/jinja_renderer.py -o ${output_file} -t ${template_file} -y ${CMAKE_CURRENT_BINARY_DIR}/tmp_files/${config_target}
                DEPENDS ${output_file}_sm_details
            )
        else()
            add_custom_target(${output_file}
                COMMAND mkdir -p ${CMAKE_CURRENT_BINARY_DIR}/autogen_files
                COMMAND python3 ${TOOLS}/jinja_renderer.py -o ${output_file} -t ${template_file} -y ${config_file}
            )
        endif()
        #Adding dependency to make to ensure file is gnerated
        add_dependencies(btc_usched_ut_simpy  ${output_file})
        math(EXPR index "${index} + 3")
    endwhile()
endfunction()
 
math(EXPR need_sm_config "0")
add_autogen_targets(AUTOGEN_RECIPES ${need_sm_config})
