#ifndef __HCI_HANDLERS_AUTOGEN_H__
#define  __HCI_HANDLERS_AUTOGEN_H__
#include <hci.h>
/* -------------------link_control_handlers---------------------*/
void hci_cmd_inquiry_handler(void *ctx,pkb_t *pkb);
void hci_cmd_inquiry_cancel_handler(void *ctx,pkb_t *pkb);
void hci_cmd_periodic_inquiry_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_exit_periodic_inquiry_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_create_connection_handler(void *ctx,pkb_t *pkb);
void hci_cmd_disconnect_handler(void *ctx,pkb_t *pkb);
void hci_cmd_create_connection_cancel_handler(void *ctx,pkb_t *pkb);
void hci_cmd_accept_connection_request_handler(void *ctx,pkb_t *pkb);
void hci_cmd_reject_connection_request_handler(void *ctx,pkb_t *pkb);
void hci_cmd_link_key_request_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_link_key_request_negative_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_pin_code_request_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_pin_code_request_negative_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_change_connection_packet_type_handler(void *ctx,pkb_t *pkb);
void hci_cmd_authentication_requested_handler(void *ctx,pkb_t *pkb);
void hci_cmd_set_connection_encryption_handler(void *ctx,pkb_t *pkb);
void hci_cmd_change_connection_link_key_handler(void *ctx,pkb_t *pkb);
void hci_cmd_remote_name_request_handler(void *ctx,pkb_t *pkb);
void hci_cmd_remote_name_request_cancel_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_remote_supported_features_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_remote_extended_features_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_remote_version_information_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_clock_offset_handler(void *ctx,pkb_t *pkb);
void hci_cmd_setup_synchronous_connection_handler(void *ctx,pkb_t *pkb);
void hci_cmd_accept_synchronous_connection_request_handler(void *ctx,pkb_t *pkb);
void hci_cmd_reject_synchronous_connection_request_handler(void *ctx,pkb_t *pkb);
void hci_cmd_io_capability_request_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_user_confirmation_request_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_user_confirmation_request_negative_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_user_passkey_request_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_user_passkey_request_negative_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_remote_oob_data_request_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_remote_oob_data_request_negative_reply_handler(void *ctx,pkb_t *pkb);
void hci_cmd_io_capability_request_negative_reply_handler(void *ctx,pkb_t *pkb);
/* -------------------link_policy_handlers---------------------*/
void hci_cmd_sniff_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_exit_sniff_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_qos_setup_handler(void *ctx,pkb_t *pkb);
void hci_cmd_role_discovery_handler(void *ctx,pkb_t *pkb);
void hci_cmd_switch_role_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_link_policy_settings_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_link_policy_settings_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_default_link_policy_settings_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_default_link_policy_settings_handler(void *ctx,pkb_t *pkb);
void hci_cmd_sniff_subrating_handler(void *ctx,pkb_t *pkb);
/* -------------------controller_and_baseband_handlers---------------------*/
void hci_cmd_set_event_mask_handler(void *ctx,pkb_t *pkb);
void hci_cmd_reset_handler(void *ctx,pkb_t *pkb);
void hci_cmd_set_event_filter_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_pin_type_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_pin_type_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_stored_link_key_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_stored_link_key_handler(void *ctx,pkb_t *pkb);
void hci_cmd_delete_stored_link_key_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_local_name_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_local_name_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_connection_accept_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_connection_accept_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_page_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_page_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_scan_enable_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_scan_enable_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_page_scan_activity_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_page_scan_activity_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_inquiry_scan_activity_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_inquiry_scan_activity_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_authentication_enable_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_authentication_enable_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_class_of_device_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_class_of_device_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_voice_setting_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_voice_setting_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_automatic_flush_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_automatic_flush_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_transmit_power_level_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_link_supervision_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_link_supervision_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_number_of_supported_iac_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_current_iac_lap_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_current_iac_lap_handler(void *ctx,pkb_t *pkb);
void hci_cmd_set_afh_host_channel_classification_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_inquiry_scan_type_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_inquiry_scan_type_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_inquiry_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_inquiry_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_page_scan_type_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_page_scan_type_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_afh_channel_assessment_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_afh_channel_assessment_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_extended_inquiry_response_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_extended_inquiry_response_handler(void *ctx,pkb_t *pkb);
void hci_cmd_refresh_encryption_key_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_simple_pairing_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_simple_pairing_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_local_oob_data_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_inquiry_response_transmit_power_level_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_inquiry_transmit_power_level_handler(void *ctx,pkb_t *pkb);
void hci_cmd_send_keypress_notification_handler(void *ctx,pkb_t *pkb);
void hci_cmd_enhanced_flush_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_enhanced_transmit_power_level_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_secure_connections_host_support_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_secure_connections_host_support_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_extended_page_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_extended_page_timeout_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_extended_inquiry_length_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_extended_inquiry_length_handler(void *ctx,pkb_t *pkb);
/* -------------------informational_parameters_handlers---------------------*/
void hci_cmd_read_local_version_information_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_local_supported_commands_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_local_supported_features_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_local_extended_features_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_buffer_size_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_bd_addr_handler(void *ctx,pkb_t *pkb);
/* -------------------status_parameters_handlers---------------------*/
void hci_cmd_read_link_quality_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_rssi_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_afh_channel_map_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_clock_handler(void *ctx,pkb_t *pkb);
void hci_cmd_read_encryption_key_size_handler(void *ctx,pkb_t *pkb);
/* -------------------test_commands_handlers---------------------*/
void hci_cmd_enable_device_under_test_mode_handler(void *ctx,pkb_t *pkb);
void hci_cmd_write_simple_pairing_debug_mode_handler(void *ctx,pkb_t *pkb);
/* -------------------vendor_specific_handlers---------------------*/
void hci_cmd_vendor_echo_handler(void *ctx,pkb_t *pkb);
void hci_cmd_vendor_virtual_listen_connection_handler(void *ctx,pkb_t *pkb);
void hci_cmd_vendor_virtual_cancel_listen_handler(void *ctx,pkb_t *pkb);
void hci_cmd_vendor_virtual_connect_handler(void *ctx,pkb_t *pkb);
void hci_cmd_vendor_virtual_cancel_connect_handler(void *ctx,pkb_t *pkb);
void hci_cmd_vendor_internal_event_trigger_from_lpw_handler(void *ctx,pkb_t *pkb);
void hci_cmd_vendor_kill_firmware_handler(void *ctx,pkb_t *pkb);
void hci_cmd_vendor_set_local_lmp_features_handler(void *ctx,pkb_t *pkb);

#endif